想法：定義一個set 之中所有 node 必然與其他至少一個node 共用row 或 column 
只要optimal 的拿去該set 中的元素，可以只剩下一個元素；同時每個元素只會在一個set裡面
所以這題要找出有多少"disjoint set" ，可以用DFS(BFS) 或是 Union-find的做法實作

// union set 

Time Complexity : O(n ^ 2) for union all nodes
Space Complexity : O(n) for parent array , rank array

class Solution {
public:
    static void make_sets( int n , vector<int> &parent , vector<int> &rank) {
        // make sets from 0 ... n - 1 
        for(int i = 0 ; i < n ; i++) {
            parent[i] = i ;
            rank[i] = 0 ;
        }
        return ;
    }
    static int find( int x , vector<int> &parent ) {
        if ( parent[x] == x )
            return x ;
        else {
            parent[x] = find(parent[x] , parent) ;
            return parent[x] ;
        }
    }

    static void unionSets(int x , int y , vector<int> &parent , vector<int> &rank) {
        int rootx = find(x , parent) ; 
        int rooty = find(y , parent) ; 

        if ( rootx == rooty )
            return ; 
        
        if ( rank[rootx] > rank[rooty] ) {
            parent[rooty] = rootx ; 
        } 
        else if ( rank[rootx] < rank[rooty] ) {
            parent[rootx] = rooty ;
        }
        else {
            parent[rootx] = rooty ;
            rank[rooty]++ ;
        }

        return ;
    }

    static bool valid(int i , int j , vector<vector<int>> &stones) {
        return ( stones[i][0] == stones[j][0] ) || (stones[i][1] == stones[j][1]) ;
    }

    int removeStones(vector<vector<int>>& stones) {
        int n = stones.size() ; 
        vector<int> parent(n) ;
        vector<int> rank(n) ; 

        make_sets(n , parent , rank) ;

        int set_count = 0 ;
        for(int i = 0 ; i < n ; i++) {
            for(int j = i + 1 ; j < n ; j++) {
                if ( valid(i , j , stones) ) {
                    unionSets(i , j , parent , rank ) ;
                }
            }
        }

        for( int i = 0 ; i < n ; i++ ) {
            if ( parent[i] == i )
                set_count++ ;
        }
        
        return n - set_count ;
    }
};


// BFS to find the set element

Time Complexity : O(n) for traversing all nodes 
Space Complexity : O(n) for queue (storing elements)

class Solution {
public:
    int removeStones(vector<vector<int>>& stones) {
        int count = 0 ;    
        int n = stones.size() ;
        vector<bool> visited(n , false) ;
        for( int i = 0 ; i < n ; i++ ) {
            if ( visited[i] )
                continue ; 

            count++ ;
            queue<int> candidates ; 
            candidates.push( i ) ; 
            visited[i] = true ;
            while ( !candidates.empty() ) {
                int now = candidates.front() ; 
                for( int j = 0; j < n ; j++ ) {
                    if ( !visited[j] && 
                    (stones[j][0] == stones[now][0] || stones[j][1] == stones[now][1]) ) {
                        candidates.push(j) ;
                        visited[j] = true ;
                    }
                }
                candidates.pop() ;
            }
        }
        
        return n - count ;
    }
};
