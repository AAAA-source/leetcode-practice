想法：因為 n 不大，可以直接用遞迴暴力解

Time Complexity : O(2^n) for recurrence 
Space Complexity : O(n) for recurrence depth

class Solution {
public:
    static int find_min(int now_length , int copy_length , int n) {
        if (now_length == n)
            return 0 ;
        if ( now_length > n )
            return 10000 ;

        if ( (n - now_length) % copy_length != 0 )
            return 10000 ;

        // only paste 
        int a = find_min( now_length + copy_length , copy_length , n ) + 1 ;
        // copy and paste 
        int b = find_min( now_length * 2 , now_length , n ) + 2 ;

        return min(a , b) ;
    }

    int minSteps(int n) {
        if ( n == 1)
            return 0 ; 

        return find_min(1 , 1 , n) + 1 ;
    }
};

法二：用dp，紀錄每個位置最小所需步數，因為dp[i]必然是在其因數j上動作，所以dp[i] = min( dp[j] + 1(Copy) + (i - j) / j (Paste) ) ,  1 <= j <= n / 2

Time Complexity : O(n^2) 
Space Complexity : O(n) for dp array

class Solution {
public:
    int minSteps(int n) {
        if ( n == 1)
            return 0 ; 

        vector<int> dp(n + 5 , 10000) ; 
        dp[1] = 0 ;
        for(int i = 2 ; i <= n ; ++i) {
            for(int j = 1 ; j <= n  / 2 ; j++) {
                if ( i % j == 0 ) {
                    dp[i] = min (dp[i] , dp[j] + i / j) ;
                }
            }
        }

        return dp[n] ;
    }
};
