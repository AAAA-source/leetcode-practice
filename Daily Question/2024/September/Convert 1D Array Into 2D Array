想法：照著做即可，只需檢查m * n == size ，如果不是的話可以直接回傳空陣列
反之，創造一個新的陣列再依序填入每個數字

Time Complexity : O(m * n) for traversing all elements 
Space Complexity : O(m * n) for new 2D arrays 

class Solution {
public:
    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {
        if ( m * n != original.size() )
            return {} ;

        vector< vector<int> > answer( m , vector<int>(n) ) ;
        for( int i = 0 ; i < original.size() ; ++i ) {
            answer[i / n][i % n] = original[i] ;
        }
        return answer ;
    }   
};


// use " assign " to implement
技巧：vector.assign( 開始位置 , 結束位置的下一個 ) 

class Solution {
public:
    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {
        if ( m * n != original.size() )
            return {} ;

        vector< vector<int> > answer( m , vector<int>(n) ) ;
        for( int i = 0 ; i < original.size() ; i += n ) {
            answer[i / n].assign( &(original[i]) , &(original[i + n]) ) ;
        }
        return answer ;
    }   
};
