想法：先將字串轉換成數字，再用 hash set 紀錄已經出現過的數字；接著從 0 開始看哪個數字沒有出現在 hash set 中即可輸出

Time Complexity : O(n^2) for inserting n numbers into the hash set , each one takes O(n) time (最糟情況下 nums 中儲存的是0 ... n - 1) 
Space Complexity : O(n) for the hash set to store n numbers

class Solution {
public:
    int to_decimal(string& num) {
        int count = 0 ;
        int power = 1 ;
        for(int i = num.size() - 1 ; i >= 0 ; i--) {
            count += power * (num[i] - '0') ;
            power *= 2 ;
        }
        return count ;
    }
    string to_binary(int num , int length) {
        string result ;
        int power = 2 ;
        while (length--) {
            result += (num % power) + '0' ;
            num /= power ;
        }
        reverse(result.begin() , result.end()) ;
        return result ;
    }
    string findDifferentBinaryString(vector<string>& nums) {
        unordered_set<int> appear ;
        for(auto &s : nums) {
            appear.insert( to_decimal(s)) ;
        }
        
        for(int i = 0 ; i < nums.size() + 1 ; i++) {
            if ( appear.find(i) == appear.end() )
                return to_binary(i , nums[0].size());
        }

        return "" ;
    }
};

// 法二：由於題目只需要找到任意一個沒有出現過的數字，所以我們可以定義
第 i 個字串與答案在第 i 個 bit 上不同，換句話說，我們的字串是由 !nums[i][i] , i = 0 ... n - 1 所組成

Time Complexity : O(n) for traversing the array
Space Complexity : O(1) for the variables

class Solution {
public:
    string findDifferentBinaryString(vector<string>& nums) {
        string ans;
        for (int i = 0; i < nums.size(); i++) {
            char curr = nums[i][i];
            ans += (curr == '0')? '1' : '0';
        }
        
        return ans;
    }
};
