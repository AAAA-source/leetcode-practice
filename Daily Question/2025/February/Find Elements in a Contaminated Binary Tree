想法：用 DFS 的方式重建整棵樹，並用 hash set 紀錄出現過的數字，未來查找時只需查看 hash set 中是否存在即可

Time Complexity : O(n) for constructing n nodes in the tree
  Space Complexity : O(n) for the hash set to store n numbers


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class FindElements {
public:
    unordered_set<int> appear ;
    void DFS(int x , TreeNode* root) {
        if ( x > 1e6 || !root )
            return ;
        
        appear.insert(x) ;
        //cout << "insert : " << x << endl ;
        DFS(2 * x + 1 , root->left) ;
        DFS(2 * x + 2 , root->right) ;
        return ;
    }
    FindElements(TreeNode* root) {
        DFS(0 , root) ;
    }
    
    bool find(int target) {
        return appear.find(target) != appear.end() ;
    }
};

/**
 * Your FindElements object will be instantiated and called as such:
 * FindElements* obj = new FindElements(root);
 * bool param_1 = obj->find(target);
 */
