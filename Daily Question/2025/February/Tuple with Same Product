想法：先對陣列進行排序，接著嘗試 nums[i .. j] 的所有可能，其中 i , j 之間可以使用 two pointers 用 O(n) 時間找到所有解

Time Complexity : O(n^3) for O(n^2) (i , j) pairs and each pair takes O(n) time
Space Complexity : O(1) for variables and O(logn) for std::sort

class Solution {
public:
    int tupleSameProduct(vector<int>& nums) {
        sort( nums.begin() , nums.end() ) ;

        int ans = 0 ;
        int n = nums.size() ;
        for(int i = 0 ; i < n - 3 ; i++) {
            for(int j = i + 3 ; j < n ; j++) {
                // a = nums[i] , b = nums[j] 
                int target = nums[i] * nums[j] ;
                int l = i + 1 , r = j - 1 ;
                while ( l < r ) {
                    if ( nums[l] * nums[r] == target ) {
                        ans += 8 ;
                        l++ , r-- ;
                    }
                    else if ( nums[l] * nums[r] > target ) {
                        r-- ;
                    }
                    else 
                        l++ ;
                }
            }
        }
        return ans ;
    }
};

// 法二：用 hash map 紀錄每個乘積出現的次數，而每個乘積可貢獻 8 * n * (n - 1) / 2 種解 (n 次取兩次，每次可有八種組合)

Time Complexity : O(n^2) for finding all i * j 
Space Complexity : O(n^2) for at most O(n^2) different pairs

class Solution {
public:
    int tupleSameProduct(vector<int>& nums) {
        unordered_map<int , int> frequency ;
        int n = nums.size() ;
        for(int i = 0 ;i < n ; i++) {
            for(int j = i + 1 ; j < n ; j++)
                frequency[ nums[i] * nums[j] ]++ ;
        }

        int ans = 0 ;
        for( auto &v : frequency )
            ans += v.second * (v.second - 1) / 2 ;
        return ans * 8 ;
    }
};

