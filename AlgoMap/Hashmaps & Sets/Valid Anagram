想法：先判斷兩字串的長度是否相等，不相等則可以直接輸出false
接下來，因為兩字串相等長度，所以只要兩字串不相等，必然代表著某字母有多、另一字母有少
我們只需判斷少的部分即可，用hash table把每個字母出現的頻率放入（以字母為key） 

注意：此做法實際上犧牲了些許效能，為了更general使其可改版成"所有char" 的形式
技巧：Ｃ++ 中使用 unordered_map 實作hash table 

Time Complexity : O(n) for traversing two strings that len are n
Space Complexity : O(n) for storing the frequency in s

class Solution {
public:
    bool isAnagram(string s, string t) {
        if ( s.length() != t.length() )
            return false ;
        
        unordered_map<char , int> count ; 
        for(auto &i : s) 
            count[i]++ ; 
        
        for( auto &i : t ) {
            if ( count[i] == 0 ) // if i isn't in count , it will be create and init value to 0 
                return false ;
            else 
                count[i]-- ;
        }
        return true ;
    }
};

//actually , the problem limited the range of letter in lower latin alphabet , so we can just count every letter frequency from a - z 
and check the frequency in s is equal in t

Time Complexity : O(n) for traversing two strings that len are n
Space Complexity : O(1) for storing count[0..25]


class Solution {
public:
    bool isAnagram(string s, string t) {
        int n = s.length() , m = t.length() ;
        if ( n != m )
            return false ;

        int count[26] = {0} ;
        for(int i = 0 ; i < n ; i++) {
            count[s[i] - 'a']++ ;
            count[t[i] - 'a']-- ;
        }

        for( int i = 0 ; i < 26 ; i++ ) {
            if ( count[i] != 0 )
                return false ;
        }
        
        return true ;
    }
};
