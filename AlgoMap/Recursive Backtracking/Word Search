想法：每個點都作為起點一次，進行DFS；並用 unordered_set (hash table) 紀錄已經走過的點


// got TLE
struct pair_hash {
    template<class T1 , class T2>
    std::size_t operator() (const pair<T1 , T2>& p) const {
        return std::hash<T1>{}(p.first) ^ (std::hash<T2>{}(p.second) << 1 ) ;
    }
};

class Solution {
public:
    string target ; 
    vector<vector<char>> boardd ;
    unordered_set<pair<int , int> , pair_hash> visited ;
    bool existstring( int i , int j , int index ) {
        if ( i >= boardd.size() || j >= boardd[0].size() || i < 0 || j < 0 )
            return false ;
        if ( visited.find({i , j}) != visited.end() || boardd[i][j] != target[index])
            return false ;

        if ( index == target.size() - 1 )
            return true ;
        
        visited.insert( {i , j} ) ;
        bool result =  existstring( i + 1 , j , index+1) 
            || existstring(i - 1 , j , index+1) 
            || existstring(i , j + 1 , index + 1) 
            || existstring(i , j - 1 , index+1) ;
        visited.erase( {i , j} ) ;
        return result ;
    }
 
    bool exist(vector<vector<char>>& board, string word) {
        boardd = board ;
        target = word ;
        for(int i = 0 ; i < board.size() ; i++) {
            for(int j = 0 ; j < board[0].size() ; j++)
                if ( existstring(i, j ,0)  )
                    return true ;
        }
        return false ;
    }
};


// improve : 把走過的點改成不會出現的符號('$')，這樣就不用多維護一個資料結構

// m is the row number , n is the column number 
Time Complexity : O(mn * 4^(m*n) ) for DFS mn times 
Space COmplexity : total O(mn * 4^length) for the recursion , maximal O(n*m) in any time 


 class Solution {
public:
    string target ; 
    vector<vector<char>> boardd ;
    bool existstring( int i , int j , int index ) {
        if ( i >= boardd.size() || j >= boardd[0].size() || i < 0 || j < 0 
         || boardd[i][j] != target[index])
            return false ;

        if ( index == target.size() - 1 )
            return true ;
        
        char temp = boardd[i][j] ;
        boardd[i][j] = '$' ;
        bool result =  existstring( i + 1 , j , index+1) 
            || existstring(i - 1 , j , index+1) 
            || existstring(i , j + 1 , index + 1) 
            || existstring(i , j - 1 , index+1) ;
        boardd[i][j] = temp ;
        return result ;
    }
 
    bool exist(vector<vector<char>>& board, string word) {
        boardd = board ;
        target = word ;
        for(int i = 0 ; i < board.size() ; i++) {
            for(int j = 0 ; j < board[0].size() ; j++)
                if ( existstring(i, j ,0)  )
                    return true ;
        }
        return false ;
    }
};

