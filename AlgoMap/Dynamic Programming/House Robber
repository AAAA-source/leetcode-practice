想法：用dp[i] 紀錄從1..i 這些屋子中最多可偷的錢，最後輸出dp[n]
那麼dp[i] = max( dp[i - 1] , dp[i - 2] + nums[i] ) （（可能）有偷前一間 , 最多偷前兩間＋偷現在這間的較大者）

Time Complexity : O(n) for iteration 1 .. n
Space Complexity : O(n) for dp array


class Solution {
public:
    int rob(vector<int>& nums) {
        // let dp[k] = the max robbed money from 1 .. k 
        // dp[k] = max( dp[k - 2] + nums[k] , dp[k - 1] ) 
        // output dp[n - 1] 
        int n = nums.size() ;
        vector<int> dp( n ) ;

        if ( n == 1 )
            return nums[0] ;
        if ( n == 2 )
            return max( nums[0] , nums[1] ) ;
        
        // case : n >= 3 
        dp[0] = nums[0] ; 
        dp[1] = max( nums[0] , nums[1] ) ;
        for(int i = 2 ; i < n ; i++)
            dp[i] = max( dp[i - 1] , dp[i - 2] + nums[i] ) ;

        return dp[n - 1] ;
    }
};

// 因為每個狀態只會考慮到前兩個的狀態，所以可以只用變數紀錄
Space Complexity : O(1) with variables

class Solution {
public:
    int rob(vector<int>& nums) {
        // let dp[k] = the max robbed money from 1 .. k 
        // dp[k] = max( dp[k - 2] + nums[k] , dp[k - 1] ) 
        // output dp[n - 1] 
        int n = nums.size() ;

        if ( n == 1 )
            return nums[0] ;
        if ( n == 2 )
            return max( nums[0] , nums[1] ) ;
        
        // case : n >= 3 
        int last1 = nums[0] , last2 =max( nums[0] , nums[1] ) ;
        int now ;
        for(int i = 2 ; i < n ; i++) {
            now = max( last2 , last1 + nums[i] ) ;
            last1 = last2 ; 
            last2 = now ;
        }
        return now ;
    }
};
