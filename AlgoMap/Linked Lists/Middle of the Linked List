想法：先跑過一次算出總長度，再從頭跑到中間即可

Time Complexity : O(n) for traversing array
Space Complexity : O(1) for variables 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        if ( head == nullptr )
            return nullptr ;
        int length = 0 ;
        ListNode* cursor = head ;
        while ( cursor != nullptr ) {
            length++ ;
            cursor = cursor->next ;
        }
        
        cursor = head ; 
        length /= 2 ;
        while ( length > 0 ) {
            length-- ;
            cursor = cursor->next ;
        }

        return cursor ;
    }
};

法二：使用fast , slow pointers , 再fast pointer 到尾巴的時候，slow pointer剛好到中間
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode* slow = head , *fast = head ;

        while ( fast != nullptr && fast->next != nullptr ) {
            fast = fast->next->next ;
            slow = slow->next ;
        }

        return slow ; 
    }
};
