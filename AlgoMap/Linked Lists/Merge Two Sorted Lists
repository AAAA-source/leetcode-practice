想法：新增一條空的linked list，依次把所有list1 , list2 nodes都移到新的list上並回傳
注意：需要注意當一條list 到結尾時，需要把另外一條未完成的list連接過去

// list1 has a nodes , list2 has b nodes 
Time Complexity : O(a + b) for traversing all nodes 
Space Complexity : O(1) for variables (we don't create new list , just moving the nodes) 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if ( list1 == nullptr  )
            return list2 ; 
        else if ( list2 == nullptr )
            return list1 ;

        ListNode* head = nullptr , *tail = nullptr ; 
        ListNode* cursor1 = list1 , *cursor2 = list2 ;
        
        while ( cursor1 != nullptr && cursor2 != nullptr ) {
            if ( cursor1->val < cursor2->val ) {
                if ( head == nullptr ) {
                    head = tail = cursor1 ;
                }
                else {
                    tail->next = cursor1 ;
                    tail = cursor1 ;
                }
                cursor1 = cursor1->next ;
            }
            else {
                if ( head == nullptr ) {
                    head = tail = cursor2 ;
                }
                else {
                    tail->next = cursor2 ;
                    tail = cursor2 ;
                }
                cursor2 = cursor2->next ;
            }
        }

        if ( cursor1 == nullptr )
            tail->next = cursor2 ;
        else 
            tail->next = cursor1 ;
        return head ;
    }
};
