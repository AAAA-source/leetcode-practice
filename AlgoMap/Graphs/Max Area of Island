想法：每次碰到 1 進行一次DFS找出該島嶼面積，並記錄最大島嶼面積

// assume the grid  is m * n
Time Complexity : O(mn) for traverse all element at most two times 
Space Complexity : O(mn) for recursion

class Solution {
public:
    int DFS(vector<vector<int>>& grid , int i , int j) {
        if ( i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size()
         || grid[i][j] == 0 )
            return 0 ;
        grid[i][j] = 0 ;
        return DFS(grid , i + 1 , j) + DFS(grid , i - 1 , j) 
            + DFS(grid , i , j + 1) + DFS(grid , i , j - 1) + 1 ;
    }
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int maxarea = 0 ; 
        for(int i = 0 ; i < grid.size() ; i++) {
            for(int j = 0 ; j < grid[0].size() ; j++) {
                if ( grid[i][j] != 0 ) {
                    maxarea = max( maxarea , DFS(grid , i , j) ) ;
                }
            }
        }
        return maxarea ;
    }
};
