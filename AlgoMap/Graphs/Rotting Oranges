想法：先把所有已經壞掉的橘子放到一個queue 裡面，接著以該queue進行一次BFS，紀錄所有橘子壞掉的時間
此時間代表著距離任一壞掉橘子的最短距離，也就是最短壞掉時間；最後找到最大值輸出即可(或是仍有新鮮橘子，輸出-1)

Time Complexity : O(mn) for traverse all grids 
Space Complexity : O(mn) for queue and array 

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int n = grid.size() , m = grid[0].size() ;
        vector<vector<int>> time(n , vector(m , -1) ) ;
        // calculate the fresh orange 
        
        queue<pair<int , int>> q ;
        for(int i = 0 ; i < n ; i++) {
            for( int j = 0 ; j < m ; j++ ) {
                if ( grid[i][j] == 2 ) {
                    time[i][j] = 0 ;
                    q.push({i , j}) ;
                }
            }
        }

        while (!q.empty()) {
            auto p = q.front() ;
            int i = p.first , j = p.second ;
            q.pop() ;

            if ( i - 1 >= 0 && grid[i - 1][j] == 1 ) {
                time[i - 1][j] = time[i][j] + 1 ;
                grid[i - 1][j] = 2 ;
                q.push({i - 1 , j}) ;
            }
            if ( i + 1 < n && grid[i + 1][j] == 1 ) {
                time[i + 1][j] = time[i][j] + 1 ;
                grid[i + 1][j] = 2 ;
                q.push({i + 1 , j}) ;
            }
            if ( j - 1 >= 0 && grid[i][j - 1] == 1 ) {
                time[i][j - 1] = time[i][j] + 1 ;
                grid[i][j - 1] = 2 ;
                q.push({i , j - 1}) ;
            }
            if ( j + 1 < m && grid[i][j + 1] == 1 ) {
                time[i][j + 1] = time[i][j] + 1 ;
                grid[i][j + 1] = 2 ;
                q.push({i , j + 1}) ;
            }
        }

        int maxtime = 0 ;
        for(int i = 0 ; i < n ; i++) {
            for(int j = 0 ; j < m ; j++) {
                if ( grid[i][j] == 1 )
                    return -1 ;
                else 
                    maxtime = max( maxtime , time[i][j] ) ;
            }
        }
        return maxtime ;
    }
};

// 也可改成一次完成所有同一時間壞掉的橘子，這樣就不用紀錄每個橘子的壞掉時間，只需用一個變數紀錄最大壞掉時間即可
class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int freshcount = 0 ;
        int n = grid.size() , m = grid[0].size() ;
        queue<pair<int , int>> q ;
        for(int i = 0 ; i < n ; i++) {
            for(int j = 0 ; j < m ; j++) {
                if ( grid[i][j] == 1 )
                    freshcount++ ;
                else if ( grid[i][j] == 2 )
                    q.push( {i , j} ) ;
            }
        }
        int maxtime = 0 ;
        while ( !q.empty() ) {
            int size = q.size() ; 
            // the size means the number of grid which all have same rotten time 
            for(int i = 0 ; i < size ; i++) {
                auto p = q.front() ;
                q.pop() ;
                int r = p.first , c = p.second ;
                if ( r - 1 >= 0 && grid[r - 1][c] == 1 ) {
                    grid[r - 1][c] = 2 ;
                    freshcount-- ;
                    q.push({r - 1 , c}) ;
                } 
                if ( r + 1 < n && grid[r + 1][c] == 1 ) {
                    grid[r + 1][c] = 2 ;
                    freshcount-- ;
                    q.push({r + 1 , c}) ;
                }
                if ( c - 1 >= 0 && grid[r][c - 1] == 1 ) {
                    grid[r][c - 1] = 2 ;
                    freshcount-- ;
                    q.push( {r , c - 1} ) ;
                }
                if ( c + 1 < m && grid[r][c + 1] == 1 ) {
                    grid[r][c + 1] = 2 ;
                    freshcount-- ;
                    q.push( {r , c + 1} ) ;
                }
            }
            if ( !q.empty() )
                maxtime++ ;
        }


        return (freshcount > 0)? -1 : maxtime ;
    }
};
