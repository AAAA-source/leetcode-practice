想法：遇到'1' 的點的時候就DFS一次，把走得到的全部變成0（避免重複運算）；統計走到'1'的數量

// assume the grid is n * m 
Time Complexity : O(mn) for traverse all elements at most two times 
Space Complexity : O(mn) for recursion

#include<stack>
class Solution {
public:
    void DFS (vector<vector<char>>& grid , int i ,int j) {
        if ( i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size() 
            || grid[i][j] == '0' )
            return ; 
        grid[i][j] = '0' ;
        DFS(grid , i + 1 ,j) ;
        DFS(grid , i - 1 , j) ;
        DFS(grid , i , j + 1) ;
        DFS(grid , i , j - 1) ;
        return ;
    }
    int numIslands(vector<vector<char>>& grid) {
        int ans = 0 ; 
        for(int i = 0 ; i < grid.size() ; i++) {
            for(int j = 0 ; j < grid[0].size() ; j++) {
                if ( grid[i][j] != '0' ) {
                    DFS(grid , i , j) ;
                    ans++ ;
                }
            }
        }
        return ans ;
    }
};
