想法：用max heap 紀錄前 k 小的元素，再輸出即可

Time Complexity : O(nlogk) for n times heapify the heap
Space Complexity : O(k) for the heap 

#include<queue>
class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        priority_queue< pair<int , pair<int , int>> > maxheap ;
        for( auto v : points ) {
            int distance = v[0] * v[0] + v[1] * v[1] ;
            if ( maxheap.size() < k ) {
                maxheap.push( {distance , {v[0] , v[1]}} ) ;
            }
            else if ( maxheap.top().first > distance ) {
                maxheap.pop() ;
                maxheap.push( {distance , {v[0] , v[1]}} ) ;
            }
        }

        vector< vector<int> > ans ;
        while ( !maxheap.empty() ) {
            ans.push_back( {maxheap.top().second.first , maxheap.top().second.second} ) ;
            maxheap.pop() ;
        }
        return ans ;
    }
};

法二：直接把整個array 變成 heap , 再輸出前 k 小的元素
Time Complexity : O(klogn) for k times poping elements and O(n) time for creating the heap
Space Complexity : O(k) for the answer array

class Solution {
public:
    struct Compare {
        bool operator()(const vector<int>& a, const vector<int>& b) {
            return (a[0] * a[0] + a[1] * a[1] > b[0] * b[0] + b[1] * b[1]);
        }
    };

    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        make_heap( points.begin() , points.end() , Compare() ) ;

        vector< vector<int> > ans ;
        for(int i = 0 ; i < k ; i++) {
            pop_heap( points.begin() , points.end() , Compare() ) ;
            ans.push_back( points.back() ) ;
            points.pop_back() ;
        } 
        return ans ;
    }   
};
