想法：照著題目做即可，直到只剩下一顆石頭或是沒有石頭；使用 max heap 快速取得前兩大的元素

技巧：利用C++內建的priority_queue 實現heap；預設是最大堆，如果要使用最小堆需要
priority_queue<type , vector<type> , greater<type>(或自己實作，使得大元素 > 小元素的函式) >

初始化時直接引入( vector.begin() , vector.end() ) 就不用一個一個引入元素

Time Complexity : O(nlogn) for O(n) times taking stones and maintain the heap
Space Complexity : O(n) for the heap

#include<queue>
#include<vector>
class Solution {
public:
    int lastStoneWeight(vector<int>& stones) {
        priority_queue<int> left_stones(stones.begin() , stones.end()) ; 
        while ( left_stones.size() > 1 ) {
            int x = left_stones.top() ;
            left_stones.pop() ;
            int y = left_stones.top() ;
            left_stones.pop() ;

            
            if ( x > y ) // because x always >= y (by heap porperty) , so we only need to check if x > y)
                left_stones.push(x - y) ;
        }

        if ( !left_stones.empty() )
            return left_stones.top() ;
        else 
            return 0 ;
    }
};

//法二：使用同一個array 轉成 heap 

技巧：
make_heap : 把vector 轉成heap
pop_heap : 把最大元素移到vector 尾部（並不會刪除元素），所以要另外pop_back
push_heap : 在push_back 之後，重新排列元素

如果要變成最小堆的話，一樣使用greater<type> 即可（#include <functional>）

Time Complexity : O(nlogn) for O(n) times taking stones and maintain the heap
Space Complexity : O(1) for the variables

#include<vector>
#include<algorithm>
class Solution {
public:
    int lastStoneWeight(vector<int>& stones) {
        make_heap(stones.begin() , stones.end()) ; 
        while ( stones.size() > 1 ) {
            pop_heap( stones.begin() , stones.end() ) ;
            int x = stones.back() ;
            stones.pop_back() ;

            pop_heap( stones.begin() , stones.end() ) ;
            int y = stones.back() ;
            stones.pop_back() ;
            
            if ( x > y ) {
                stones.push_back(x - y) ;
                push_heap( stones.begin() , stones.end() ) ;
            }
        }

        if ( !stones.empty() )
            return stones.back() ;
        else 
            return 0 ;
    }
};
