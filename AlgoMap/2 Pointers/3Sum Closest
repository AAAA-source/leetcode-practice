想法：先對nums 排序，針對每個 i 都找 nums[i + 1 ... n- 1] 的pair(紀錄最接近 target - nums[i] 的組合)

Time Complexity : O(n^2)
Space Complexity : O(1) + O(logn) (for std::sort)

class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        sort( nums.begin() , nums.end() ) ;
        int ans = 1e8 ;
        int n = nums.size() ;
        for(int i = 0 ; i < n - 2 ; i++) {
            int left = i + 1 ;
            int right = n - 1 ;
            while ( left < right ) {
                int sum = nums[i] + nums[left] + nums[right] ;
                if ( abs(target - sum) < abs(target - ans) )
                    ans = sum ;

                if ( sum < target )
                    left++ ;
                else if ( sum > target )
                    right-- ;
                else 
                    return sum ;
            }
        }
        return ans ;
    }
};

// or using binary search : 找過所有 (i , j) pair , 從 nums[j + 1 .. n - 1] 中找第一個大於等於target - nums[i] - nums[j] 的元素，以及考慮前一個元素即可
Time Complexity : O(n^2logn)


class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        sort(nums.begin() , nums.end()) ;
        int ans = 1e8 ;
        int n = nums.size() ;
        for(int i = 0 ; i < n ; i++) {
            for(int j = i + 1 ; j < n - 1 ; j++) {
                int temp_target = target - nums[i] - nums[j] ;
                auto highptr = lower_bound( nums.begin() + j + 1 , nums.end()
                     , temp_target ) ;
                auto lowptr = highptr - 1 ;
                if (highptr != nums.end() 
                    && abs(target - ans) > abs(target - nums[i] - nums[j] - *highptr)) {
                    ans =  nums[i] + nums[j] + *highptr ;
                }
                if ( lowptr - nums.begin() > j 
                && abs(target - ans) > abs(target -  nums[i] - nums[j] - *lowptr)) {
                    ans =  nums[i] + nums[j] + *lowptr ;
                }

            }
        }
        return ans ;
    }
};

