想法：可以用 two sum 的方法，遍歷每個 array element ，但是為了確保不要出現重複的數字；要先sort
意即，先固定array[i]，再想辦法在a[i + 1 ... n]中找到 0 - array[i] 

技巧：為了不要重複，只要看過的element，下一次一定看比他嚴格大的元素開始；先紀錄每個元素出現在哪裡
，因為我們找尋的過程中 i < j < k ，所以只要查看 k > j 即可（否則之前看過了）

Time Complexity : O(n ^ 2) for hash table finding O(n) * O(n) elements
Space Complexity : O(n) for hash table 

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin() , nums.end()) ;
        int n = nums.size() ;
        vector< vector<int> > result ;
        unordered_map<int , vector<int>> appear ; 
        for(int i = 0 ; i < n ; i++) {
            appear[nums[i]].push_back(i) ;
        }

        for(int i = 0 ; i < n - 1 ; i++) {
            if (i > 0 && nums[i] == nums[i - 1])
                continue ;
            for(int j = i + 1 ; j < n ; j++) {
                if ( j > i + 1 && nums[j] == nums[j - 1] )
                    continue ;

                //cout << i << " " << j << endl ;
                //cout << "want to find : " << 0 - nums[i] - nums[j] << endl ;
                if ( appear.find(0 - nums[i] - nums[j] ) == appear.end() ) 
                    continue ;             

                int k = appear[0 - nums[i] - nums[j]].back() ;
                if ( k > j )
                    result.push_back( {nums[i] , nums[j] , nums[k]} ) ;
            }
        }

        return result ;
    }
};


// 因為是sorted array , 所以可以用two pointers 的解法（two sum from sorted array） 

Time Complexity : O(n ^ n) for O(n) (two pointers approach) * O(n) elements 
Space Complexity : O(1) for variables

技巧：為了不要重複，只要看過的element，下一次一定看比他嚴格大的元素開始

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin() , nums.end()) ;
        int n = nums.size() ;

        vector< vector<int> > result ;
        for(int i = 0 ; i < n - 2 ; i++) {
            if (nums[i] > 0)
                break ;

            if (i > 0 && nums[i] == nums[i - 1])
                continue ;
            
            int low = i + 1 ; 
            int high = n - 1 ; 
            while ( low < high ) {
                if ( nums[i] + nums[low] + nums[high] == 0  )  {
                    result.push_back( {nums[i] , nums[low] , nums[high]} ) ;
                    low++ , high-- ;
                    while ( low < n && nums[low] == nums[low - 1] )
                        low++ ; 
                    while ( high >= 0 && nums[high] == nums[high + 1]  )
                        high-- ;

                }
                else if ( nums[i] + nums[low] + nums[high] > 0  )
                    high-- ;
                else 
                    low++ ;


            }


        }

        return result ;
    }
};



