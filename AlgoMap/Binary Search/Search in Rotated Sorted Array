想法：維護target可能出現的範圍在 l ... r 之間，而binary search 會求出二者中點 m 

1. target appear at m : return m 

2. target appear at l ... m - 1 : 
  2-1 : nums[l ... m - 1] are sorted , and nums[l] <= target <= nums[m - 1] 
  2-2 : not sorted because rotation ( nums[l] ... max , min ... nums[m - 1] ) , and target > nums[l] or target < nums[m] 
So , r = m - 1 

3. target appear at l + 1 ... m
  3-1 : nums[m + 1 ... r] , and nums[m + 1] <= target <= nums[m]
  3-2 : not sorted ( nums[m] ... max , min ... nums[r] ) , and target > nums[m] or target < nums[r]
So , l = m + 1

Time Complexity : O(logn) for binary search 
Space Complexity : O(1) for variables 

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int l = 0 , r = nums.size() - 1 ;

        while ( l <= r ) {
            int m = l + (r - l) / 2 ; 
            if ( nums[m] == target )
                return m ; 
            else if ( nums[m] > target ) {
                if ( ( nums[m] > nums[l] && nums[l] <= target ) || 
                ( nums[l] > nums[m] ) )
                    r = m - 1 ;
                else 
                    l = m + 1 ;
            }
            else {
                // nums[m] < target
                if (( nums[m] < nums[r] && nums[r] >= target ) || ( nums[m] > nums[r] ) )
                    l = m + 1 ;
                else 
                    r = m - 1 ;
            }

        } 

        return -1 ;
    }
};
