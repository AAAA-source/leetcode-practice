想法：採用閉區間的方式設定l , r ，答案可能出現在 l <= i <= r 這個範圍內，當 l == r 即跳出迴圈
此時代表 l 與 r 縮在同一點上，如果這點等於target即是答案，否則就輸出-1 

Time Complexity : O(logn) for binary search
Space Complexity : O(1) for variables 

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int l = 0 , r = nums.size() - 1 ;
        while ( l < r ) {
            int m = (l + r + 1) / 2 ; 
            if ( nums[m] == target )    
                l = r = m ;
            else if ( nums[m] > target )
                r = m - 1 ; 
            else 
                l = m + 1 ;
        } 
        
        if ( nums[r] == target )
            return r ;
        else 
            return -1 ;
    }
};


// another implementation way 
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int l = 0 , r = nums.size() - 1 ;
        while ( l <= r ) {
            int m = (l + r ) / 2 ; 
            if ( nums[m] == target )    
                return m ;
            else if ( nums[m] > target )
                r = m - 1 ; 
            else 
                l = m + 1 ;
        } 
        
        return -1 ;
    }
};
