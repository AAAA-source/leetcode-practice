想法：用兩個矩陣紀錄每個level 的node總和跟node 數量，最後算平均即可
使用DFS走過每個節點並記錄

Time Complexity : O(n) for traversing all nodes
Space Complexity : O(n) for sum array , count array ( when tree height h = O(n) )

技巧：可以直接使用double紀錄，因為double可紀錄的數字範圍很廣，不用擔心 overflow

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<double> sum ;
    vector<double> count ; 
    void DFS( TreeNode* root , int level ) {
        if ( root == nullptr )
            return ;
        if ( sum.size() <= level ) {
            sum.push_back( root->val ) ;
            count.push_back( 1 ) ;
        }
        else {
            sum[level] += root->val ;
            count[level]++ ;
        }
        DFS( root->left , level + 1 ) ;
        DFS( root->right , level + 1) ;
    }
    vector<double> averageOfLevels(TreeNode* root) {
        DFS(root , 0) ;
        vector<double> ans ;
        for( int i = 0 ; i < sum.size() ; i++ ) {
            ans.push_back(  sum[i] / count[i] ) ;
        }
        return ans ;
    }
};


// 法二：use BFS to traverse the tree 
這樣同一層的node會被排在連續的位置上，所以可以只用兩個變數紀錄該層總和及數量，不需要額外開兩個矩陣紀錄

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) {
        queue<pair<TreeNode* , int>> pending ;
        pending.push( {root , 0} ) ; 

        vector<double> ans ;
        while ( !pending.empty() ) {
            auto target = pending.front() ; 
            pending.pop() ; 

            double sum = target.first->val ;
            int count = 1 ;
            if ( target.first->right != nullptr )
                pending.push( {target.first->right , target.second + 1} ) ;
            if ( target.first->left != nullptr )
                pending.push( {target.first->left  , target.second + 1} ) ;
            while ( !pending.empty() && pending.front().second == target.second ) {
                auto temp = pending.front() ;
                sum += temp.first->val ;
                count++ ;

                if ( temp.first->right != nullptr )
                    pending.push( {temp.first->right , temp.second + 1} ) ;
                if ( temp.first->left != nullptr )
                    pending.push( {temp.first->left  , temp.second + 1} ) ;

                pending.pop() ;
            }
            ans.push_back( sum / count ) ;
        }

        return ans ;
    }
};
