想法：在 DFS 的過程中，維護該個元素合法的範圍 (left , right) ，只需查看該元素是否合法即可

注意：因為元素值可能的範圍為整個 integer range , 所以要用 long long int 來紀錄 range
(需 #include<limits> )
right = LLONG_MAX or std::numeric_limits<long long int>::max()
left = LLONG_MIN or std::numeric_limits<long long int>::min()

Time Complexity : O(n) for traversing n nodes 
Space Complexity : O(h) for recursion depth (h = O(n)) 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
#include <limits>
class Solution {
public:
    bool valid(TreeNode* root ,long long int left ,long long int right) {
        if (!root)
            return true ;
        
        if ( root->val <= left || root->val >= right )
            return false ;

        return valid( root->left , left , root->val ) 
                && valid(root->right , root->val , right) ;
    }
    bool isValidBST(TreeNode* root) {
        return valid(root , LLONG_MIN , LLONG_MAX ) ;
    }
};
