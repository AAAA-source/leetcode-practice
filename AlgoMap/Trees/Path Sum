想法：DFS一次即可，碰到葉子時檢查是否與targetSum 相同（也就是加上葉子的數值剛好等於targetSum）

Time Complexity : O(n) for traversing n nodes
Space Complexity : O(h) for recursion depth = the height of tree( h = O(n) )

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool hasPathSum(TreeNode* root, int targetSum) {
        if ( root == nullptr )
            return false ;

        if ( root->right == nullptr && root->left == nullptr && targetSum == root->val )
            return true ;
        else 
            return hasPathSum(root->left , targetSum - root->val) 
            || hasPathSum(root->right , targetSum - root->val) ;
    }
};
