想法：只需檢查每個節點是否一樣即可，如果一樣的話就繼續檢查左子樹、右子樹

Time Complexity : O( nodes of p + nodes of q ) for traversing the tree
Space Complexity : O(  height of p + height of q  ) for recursion depth 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if ( p == nullptr && q == nullptr )
            return true ; 
        else if ( p == nullptr || q == nullptr || p->val != q->val )
            return false ;
        
        return isSameTree(p->left , q->left) && isSameTree( p->right , q->right ) ;
    }
};
