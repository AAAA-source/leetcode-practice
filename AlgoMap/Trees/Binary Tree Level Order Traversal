想法：level-order traversal 實際上就是 BFS 的應用，所以只需用queue實作即可；要注意的是answer array 會依據不同level 而有不同array , 
所以需要特別判斷目前level 是否需要新創建 array 

Time Complexity : O(n) for BFS one time
Space Complexity : O(n) for queue and answer array

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
#include<queue>
#include<vector>
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        if ( root == nullptr )
            return {} ;
        queue<pair<TreeNode* , int>> q ; 
        q.push( {root , 0} ) ; 

        vector<vector<int>> ans ;
        while ( !q.empty() ) {
            auto now = q.front() ;
            q.pop() ;
            if ( ans.empty() || ans.size() == now.second ) {
                ans.push_back( {now.first->val} ) ;
            }
            else 
                ans.back().push_back( now.first->val ) ;

            if ( now.first->left != nullptr )
                q.push( {now.first->left , now.second + 1} ) ;
            if ( now.first->right != nullptr )
                q.push( {now.first->right , now.second + 1} ) ;
        }

        return ans ;
    }
};
