想法：維護兩個指針，指向兩個鏡像位置；如果不一樣就回傳false , 反之則繼續看下面的鏡像位置 (l->right , r->left) 以及 (r->right , l->left) 
直到base case 停止

Time Complexity : O(n) for traversing n nodes
Space Complexity : O(h) for recursion depth i.e. the height of tree (h = O(n))

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        return check( root->left , root->right ) ;
    }

private:
    bool check( TreeNode* r , TreeNode* l ) {
        if  (!r && !l)
            return true ;
        else if ( !r || !l || r->val != l->val ) {
            return false ;
        }
        else {
            return check( r->right , l->left ) && check( r->left , l->right ) ;
        }
    }

};

// another way : 節省空間
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    bool success = true ;
public:
    bool isSymmetric(TreeNode* root) {
        check( root->left , root->right ) ;
        return success ;
    }

private:
    void check( TreeNode* r , TreeNode* l ) {
        if ( (!r && !l) || !success )
            return ;
        else if ( !r || !l ) {
            success = false ;
            return ;
        }
        
        if ( r->val != l->val ) {
            success = false ;
        }
        else {
            check( r->right , l->left ) ;
            check( r->left , l->right ) ;
        }
        return ;
    }

};

// use stack instead of recursion : 節省空間
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        bool success = true ;
        stack< pair<TreeNode* , TreeNode*> > s ; 
        s.push( {root , root} ) ;
        while ( success && !s.empty() ) {
            auto p = s.top() ;
            s.pop() ;
            if ( p.first == nullptr && p.second == nullptr )
                continue ;
            else if ( p.first == nullptr || p.second == nullptr || 
                    p.first->val != p.second->val )
                success = false ;
            else {
                s.push( { p.first->left , p.second->right } ) ;
                s.push( {p.first->right , p.second->left} ) ;
            }
        }

        return success ;
    }
};
