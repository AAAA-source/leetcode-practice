想法：每個node都當成subroot , 所以每個node都跑一次DFS 確定是否是 subtree 即可


// n is the number of nodes at tree , m is the number of nodes in subtree
Time Complexity : O(n * m) for n nodes , every nodes run DFS one time ( m = O(n))
Space Complexity : O(h) for recursion depth (h = the height of tree = O(n))

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool sameTree( TreeNode* root1 , TreeNode* root2 ) {
        if ( !root1 && !root2 )
            return true ;
        else if ( !root1 || !root2 || root1->val != root2->val)
            return false ;
        return sameTree(root1->left , root2->left) && sameTree(root1->right , root2->right);
    }
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        if ( !root )
            return false ;

        return sameTree(root , subRoot) || isSubtree(root->left , subRoot) ||
            isSubtree(root->right , subRoot) ;
    }
};

// another implementation
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool sameTree( TreeNode* root1 , TreeNode* root2 ) {
        if ( !root1 && !root2 )
            return true ;
        else if ( !root1 || !root2 || root1->val != root2->val)
            return false ;
        return sameTree(root1->left , root2->left) && sameTree(root1->right , root2->right);
    }
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        if ( !root )
            return false ;
        if ( sameTree(root , subRoot) )
            return true ;
        return  isSubtree(root->left , subRoot) ||
            isSubtree(root->right , subRoot) ;
    }
};

法二：運用 hash table 的思維，先將一個樹轉換成一個字串（hash）,只需要比對subtree的字串是否出現在 tree 的字串中即可

技巧：利用內建函式 string.find(目標字元/字串) 快速查找
如果找到的話，會回傳第一個出現的位置，否則回傳std::string::npos

Time Complexity : O(n + m) for hashing and finding
Space Complexity : O(n + m) for storing hashing string

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    string tree_to_string( TreeNode* root ) {
        if (!root)
            return "null" ; 
        else 
            return '#' + to_string(root->val)
             + tree_to_string(root->left) + ' ' + tree_to_string(root->right) ;
    }
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        string rootstring = tree_to_string(root) ; 
        string subrootstring = tree_to_string(subRoot) ;

        return rootstring.find( subrootstring ) != string::npos ;
    }
};
