想法：DFS 一次樹，在每個節點都交換左、右子樹即可

Time Complexity : O(n) for traversing n nodes 
Space Complexity : O(h) for recursion depth is the height h of tree ( h = O(n) )

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if ( root == nullptr )
            return nullptr ; 
        
        swap(root->left , root->right) ; 
        invertTree(root->left) ; 
        invertTree(root->right) ;
        
        return root ;
    }
};

法二：用stack 取代遞迴
Time Complexity : O(n) for traversing n nodes 
Space Complexity : O(n) for storing n nodes in stack 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if ( root == nullptr )
            return nullptr ; 
        
        stack<TreeNode*> s ; 
        s.push( root ) ; 
        while ( !s.empty() ) {
            TreeNode* now = s.top() ;
            s.pop() ;

            swap( now->left , now->right ) ;
            if ( now->left != nullptr )
                s.push( now->left ) ;
            if ( now->right != nullptr )
                s.push( now->right ) ;
        }

        return root ;
    }
};
