想法：每次看最後一位是不是1，是的話就加一；並右移直到 n == 0

Time Complexity : O(logn) for n has O(logn) bits
Space Complexity : O(1) for variables 


class Solution {
public:
    int hammingWeight(int n) {
        int count = 0 ;
        while ( n > 0 ) {
            if (n & 1)
                count++ ;
            n >>= 1 ;
        }
        return count ;
    }
};

// 法二：只要 n > 0，代表說至少還有一個 1 存在，而每次 n & (n - 1) 都能使最右邊的1變成0
所以可以不斷累加一直到 n == 0

Time Complexity : O( number of bit 1s ) 
Space Complexity : O(1) for variables

class Solution {
public:
    int hammingWeight(int n) {
        int count = 0 ;
        while ( n > 0 ) {
            count++ ;
            n &= (n - 1) ;
        }
        return count ;
    }
};
