想法：直接對兩個字串做二進位制加法即可

Time Complexity : O(a + b) for traversing string  a , b 
Space Complexity : O(1) for variables

class Solution {
public:
    string addBinary(string a, string b) {
        string ans ;
        int aindex = a.length() - 1 ;
        int bindex = b.length() - 1 ;

        int add = 0 ;
        while ( aindex >= 0 || bindex >= 0 || add > 0 ) {
            int count = 0 ;
            if ( aindex >= 0 ) {
                count += a[aindex] - '0' ;
                aindex-- ;
            }
            if ( bindex >= 0 ) {
                count += b[bindex] - '0' ;
                bindex-- ;
            }
            if (add > 0) {
                count += 1 ;
                add = 0 ;
            }
            if ( count >= 2 ) {
                count -= 2 ;
                add = 1 ;
            }
            ans += count + '0' ;
        }

        reverse(ans.begin() , ans.end()) ;
        return ans ;
    }
};

// another implementation
class Solution {
public:
    string addBinary(string a, string b) {
        string ans ; 
        int n = max(a.length() , b.length()) ;
        int add = 0 ;
        reverse(a.begin() , a.end()) ;
        reverse(b.begin() , b.end()) ;

        for(int i = 0 ; i < n ; i++) {
            int result = 0 ;
            if ( a.length() > i )
                result += a[i] - '0' ;
            if ( b.length() > i )
                result += b[i] - '0' ;
            if (add > 0) {
                result += 1 ;
                add = 0 ;
            }
            if ( result >= 2 ) {
                add = 1 ;
                ans += '0' + result - 2 ;
            }
            else 
                ans += '0' + result ;
            cout << result << endl ;
        }
        if ( add > 0)
            ans += '1' ;
        reverse(ans.begin() , ans.end()) ;
        return ans ;
    }
};
