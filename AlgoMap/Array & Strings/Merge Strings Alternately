想法：用兩個變數紀錄目前各字串的指針，分別加入result字串直到一方結束
剩餘的一方用append加入result 末尾

append 用法：string.append( 參考的string , 開始的地方（0-based）, 要加入的長度) ; 

Time Complexity : O(A + B) for traverse two words
Space Complexity : O(A + B) create the new string


class Solution {
public:
    string mergeAlternately(string word1, string word2) {
        string result;
        int cursor1 = 0, cursor2 = 0;
        bool now = false;
        while (cursor1 < word1.size() && cursor2 < word2.size()) {
            if (!now) {
                // word 1 turn
                result += word1[cursor1];
                ++cursor1;
                now = true;
            } else {
                // word 2 turn
                result += word2[cursor2];
                ++cursor2;
                now = false ;
            }
        }

        if (cursor1 < word1.size())
            result.append(word1, cursor1, word1.size() - cursor1);
        if (cursor2 < word2.size())
            result.append(word2, cursor2, word2.size() - cursor2);

        return result;
    }
};


// use C code and another solution : 一次兩個字串都處理，這樣就不用處理較長字串的問題
#include<string.h>
#include<assert.h>
#include<stdlib.h>
char * mergeAlternately(char * word1, char * word2){
    int len1 = strlen(word1) ; 
    int len2 = strlen(word2) ; 

    char* result = (char*) malloc( sizeof(char) * (len1 + len2 + 5) ) ;
    assert( result != NULL ) ;
    int cursor = 0 ;
    int ptr = 0 ;
    int max = (len1 > len2)? len1 : len2 ;
    while ( cursor < max) {
        if ( cursor < len1 ) {
            result[ptr] = word1[cursor] ;
            ++ptr ;
        }
        if ( cursor < len2 ) {
            result[ptr] = word2[cursor] ;
            ++ptr ;
        }
        ++cursor ;
    }
    result[ptr] = '\0' ;
    return result ;
}
