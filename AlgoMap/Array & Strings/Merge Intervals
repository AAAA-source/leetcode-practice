想法：將所有intervals先排序，由小到大（先比較第一個元素、再來是第二個）
然後以第一個元素為基準，如果後面的元素與它重疊，只需更新end即可；反之，則需多一個interval才行
需注意最後一個interval不會在for loop 內插入，需要在loop 外插入

Time Complexity : O(nlogn) for sorting the vector
Space Complexity : O(n) for record the result 

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        sort( intervals.begin() , intervals.end() ) ; 
        vector< vector<int> > result ; 
        int start = intervals[0][0] ; 
        int end = intervals[0][1] ; 

        for(int i = 1 ; i < intervals.size() ; i++) {
            if ( intervals[i][0] <= end ) {
                end = max(end , intervals[i][1]) ;
            }
            else {
                result.push_back( {start , end} ) ;
                start = intervals[i][0] ; 
                end = intervals[i][1] ;
            }
        }
        result.push_back( {start , end} ) ; 
        return result ;
    }
};

// use my_compare to sort 
技巧：在solution中建立 static function 再呼叫（如果是non-static functino 是無法使用的 ）

class Solution {
public:
    static bool my_compare(vector<int>&a , vector<int>&b)
    {
        return a[0] < b[0] ;
    }

    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        sort( intervals.begin() , intervals.end() 
        , my_compare ) ; 
        vector< vector<int> > result ; 
        int start = intervals[0][0] ; 
        int end = intervals[0][1] ; 

        int len = intervals.size() ;
        for(int i = 1 ; i < len  ; i++) {
            if ( intervals[i][0] <= end ) {
                end = max(end , intervals[i][1]) ;
            }
            else {
                result.push_back( {start , end} ) ;
                start = intervals[i][0] ; 
                end = intervals[i][1] ;
            }
        }
        result.push_back( {start , end} ) ; 
        return result ;
    }
};
