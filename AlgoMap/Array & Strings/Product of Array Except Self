想法：因為不能用除法這個操作，所以要用前綴積 * 後綴積的方法

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size() ;
        vector<int> prefix(n) ;
        vector<int> suffix(n) ; 

        prefix[0] = 1 ; 
        suffix[n - 1] = 1 ; 
        for(int i = 1 ; i < n ; i++)
            prefix[i] = prefix[i - 1] * nums[i - 1] ;
        for(int i = n - 2 ; i >= 0 ; i--) 
            suffix[i] = suffix[i + 1] * nums[i + 1] ;

        vector<int> answer(n) ;
        for(int i = 0 ; i < n ; i++) {
            answer[i] = prefix[i] * suffix[i] ;
        }
        return answer ;
    }
};

技巧：只要一個result array 即可，且只需一個變數紀錄目前的前綴/後綴積為何就好

Time Complexity : O(n) for calculate and traverse the array
Space Complexity : O(1) for variables

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size() ;
        vector<int> answer(n) ;

        int now = 1 ; 
        for(int i = 0 ; i < n ; i++) {
            answer[i] = now ;
            now *= nums[i] ; 
        }
        now = 1 ; 
        for(int i = n - 1 ; i >= 0 ; i--) {
            answer[i] *= now ;
            now *= nums[i] ;
        }
       
        return answer ;
    }
};
