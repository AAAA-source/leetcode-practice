想法：以第一個字串為標準，其餘字串依序比對；如果都一樣就在result中加入該字元，直到第一個字串結束或是不一樣為止
風險：如果後面有字串較短的話可能會有未定義行為，所以用min 紀錄最短字串長度

二版：可以在所有字串中找到字典序最小的跟最大的比較
證明：因為其餘字串都被包含在兩者之間，如果兩者前 k 個字元相等，其餘字串也必相等；同時，若有不相等的情形，也必然會出現在最小跟最大者之間

Time Complexity: O(n * min_string_length) for looking the shortest string and compare with others
Space Complexity : O(1) for variables 

class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        int min = strs[0].size() ; 
        for(int i = 1 ; i < strs.size() ; i++) {
            if ( strs[i].size() < min )
                min = strs[i].size() ;
        }

        int cursor = 0 ;
        bool success = true ;
        string result ;
        while ( success && cursor < min) {
            for(int i = 1 ; success && i < strs.size() ; i++) {
                if ( strs[i][cursor] != strs[0][cursor] )
                    success = false ;
            }
            if ( success ) {
                result += strs[0][cursor] ;
                cursor++ ;
            }
        }

        return result ;
    }
};

// compare min , max instead of all the other strings
Time Complexity: O(s) for looking all the characters
Space Complexity : O(1) for variables 

class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        string min = strs[0] , max = strs[0] ; 
        for(int i = 0 ; i < strs.size() ; i++) {
            if ( min > strs[i] )
                min = strs[i] ;
            if ( max < strs[i] )
                max = strs[i] ;
        }

        string result ;
        for(int i = 0 ; i < min.size() && i < max.size() ; i++) {
            if ( min[i] != max[i] )
                break ;
                result += min[i] ;
        }

        return result ;
    }
};
