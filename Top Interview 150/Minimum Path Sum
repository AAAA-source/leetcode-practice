想法：典型二維 dp 問題，用 dp[i][j] 紀錄到達 grid[i][j] 的 minimum path sum
因為只能往右或往下走，所以 dp[i][j] = min(dp[i - 1][j] , dp[i][j - 1]) + grid[i][j]

Time Complexity : O(mn) for filling array
Space Complexity : O(mn) for  m * n dp array

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size() ;
        int n = grid[0].size() ;
        vector<vector<int>> dp(m ,vector<int>(n)) ;
        dp[0][0] = grid[0][0] ;
        for(int i = 0 ; i < m ; i++) {
            for(int j = 0 ; j < n ; j++) {
                if ( i == 0 && j == 0 )
                    continue ;
                int top = (i - 1 >= 0)? dp[i - 1][j] : 1e8 ;
                int left = (j - 1 >= 0)? dp[i][j - 1] : 1e8 ;
                
                dp[i][j] = min(top , left) + grid[i][j] ;
            }
        }
        return dp[m - 1][n - 1] ;
    }
};

// 因為每次填都是一列一列填，所以可以僅用一列 dp array 紀錄即可

Space Complexity : O(m) for dp array

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size() ;
        int n = grid[0].size() ;
        vector<int> dp (n) ;

        dp[0] = grid[0][0] ;
        for(int i = 0 ; i < m ; i++) {
            for(int j = 0 ; j < n ; j++) {
                if ( i == 0 && j == 0 )
                    continue ;
                int top = (i - 1 >= 0)? dp[j] : 1e8 ;
                int left = (j - 1 >= 0)? dp[j - 1] : 1e8 ;
                
                dp[j] = min(top , left) + grid[i][j] ;
            }
        }
        return dp[n - 1] ;
    }
};
