想法：用 dp[i][j] 紀錄是否可用 s1[0 ..i - 1] , s2[0 .. j - 1] 湊出s3[0 .. i + j - 1] 
那麼dp[i][j] = true if "dp[i - 1][j] is true and s1[i - 1] == s3[i + j - 1]" or "dp[i][j - 1] is true and s2[j - 1] == s3[i + j - 1]"

Time Complexity : O(s1.length * s2.e=length) for filling array
Space Complexity : O(s1.length * s2.e=length) for  the dp array

class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        if ( s1.length() == 0 )
            return s2 == s3 ;
        if ( s2.length() == 0 )
            return s1 == s3 ;
        if ( s1.length() + s2.length() != s3.length() )
            return false ;

        vector<vector<bool>> dp(s1.length()+1,vector<bool>(s2.length() + 1,false) ) ;
        dp[0][0] = true ;
        for(int i = 0 ; i <= s1.length() ; i++) {
            for(int j = 0 ; j <= s2.length() ; j++) {
                if ( j - 1 >= 0 && dp[i][j - 1] && s3[i + j - 1] == s2[j - 1] )
                    dp[i][j] = true ;
                
                if ( i - 1 >= 0 && dp[i - 1][j] && s3[i + j - 1] == s1[i - 1] )
                    dp[i][j] = true ;
            }
        }

        return dp[s1.length()][s2.length()] ;
    }
};

// 因為每次更新dp array只會用到前一列的資訊，所以可以只用兩列 dp array 紀錄即可

Space Complexity : O(s2.length) for the dp array

class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        if ( s1.length() == 0 )
            return s2 == s3 ;
        if ( s2.length() == 0 )
            return s1 == s3 ;
        if ( s1.length() + s2.length() != s3.length() )
            return false ;

        vector<int> dp(s2.length() + 1)  ;
        dp[0] = 1 ;
        for(int i = 0 ; i <= s1.length() ; i++) {
            vector<int> newdp(s2.length() + 1) ;
            if (i == 0)
                newdp[0] = dp[0] ;
            for(int j = 0 ; j <= s2.length() ; j++) {
                if ( j - 1 >= 0 && newdp[j - 1] && s3[i + j - 1] == s2[j - 1] )
                    newdp[j] = 1 ;
                
                
                if ( i - 1 >= 0 && dp[j] && s3[i + j - 1] == s1[i - 1] )
                    newdp[j] = 1 ;
            }
            dp = newdp ;
        }

        return dp[s2.length()] == 1 ;
    }
};

// another implementation
class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        if ( s1.length() == 0 )
            return s2 == s3 ;
        if ( s2.length() == 0 )
            return s1 == s3 ;
        if ( s1.length() + s2.length() != s3.length() )
            return false ;

        vector<int> dp(s2.length() + 1)  ;
        dp[0] = 1 ;
        for(int j = 1 ; j <= s2.length() ; j++) {
            if ( dp[j - 1] == 1 && s2[j - 1] == s3[j - 1] )
                dp[j] = 1 ;
        }

        for(int i = 1 ; i <= s1.length() ; i++) {
            for(int j = 0 ; j <= s2.length() ; j++) {
                if ( j - 1 >= 0 && dp[j - 1] && s3[i + j - 1] == s2[j - 1] )
                    dp[j] = 1 ;
                else if ( i - 1 >= 0 && dp[j] && s3[i + j - 1] == s1[i - 1] )
                    dp[j] = 1 ;
                else 
                    dp[j] = 0;
            }
        }

        return dp[s2.length()] == 1 ;
    }
};
