想法：先按照結束的位置進行排序，相同的話就用初始位置小的在前
因此可以得到一個結束位置是升序地排列，接著採用 greedy approach
每次都射箭在當下最右邊的位置，期望可以覆蓋多一點氣球，而如果有氣球包含另一氣球則不需考慮（另一氣球射破時也會被一起射破）
所以我們只需維護一個現在射到的位置以及用箭數量即可

Time Complexity : O(nlogn) for sorting
Space Complexity : O(1) for variables + O(logn) for std::sort

class Solution {
public:
    int findMinArrowShots(vector<vector<int>>& points) {
        for(auto &v : points)
            swap(v[0] , v[1]) ;
        
        sort(points.begin() , points.end()) ;
        for(auto &v : points)
            swap(v[0] , v[1]) ;

        int count = 0 ;
        long long int burstpoint = LLONG_MIN ;

        for(int i = 0 ; i < points.size() ; i++) {
            if (i > 0 && points[i][0] <= points[i - 1][0] 
                && points[i][1] >= points[i - 1][1] )
                continue ;
            if ( points[i][0] <= burstpoint && points[i][1] >= burstpoint )
                continue ;
            count++ ;
            burstpoint = points[i][1] ;
        }

        return count ;
    }
};
