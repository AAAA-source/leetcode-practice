想法：執行一次 DFS，回傳左子樹節點 + 右子樹節點 + 1 (代表所有節點數)

Time Complexity : O(n) for DFS
Space Complexity : O(n) for recursion ( recursion depth = O(h) = O(logn) )

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int countNodes(TreeNode* root) {
        if (!root)
            return 0 ;
        
        return countNodes(root->left) + countNodes(root->right) + 1 ;
    }
};

// 法二：利用到 complete binary tree，如果遇到 左子樹深度 == 右子樹深度時就可以直接回傳 2^h - 1 
這樣就只會在最長/不平衡的 path 上遞迴

Time Complexity : O(logn * logn) for O(logn) nodes to find the height ( h = O(logn) )
Space Complexity : O(logn) for the recursion

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int countNodes(TreeNode* root) {
        if (!root)
            return 0 ;
        
        TreeNode* r = root->right ;
        TreeNode* l = root->left ;
        int rightheight = 0 , leftheight = 0 ;
        while (r != nullptr) {
            rightheight++ ;
            r = r->right ;
        }
        while ( l != nullptr ) {
            leftheight++ ;
            l = l->left ;
        }

        if ( leftheight == rightheight )
            return (1 << (rightheight + 1)) - 1 ;
        else 
            return 1 + countNodes(root->left) + countNodes(root->right) ;
    }
};
