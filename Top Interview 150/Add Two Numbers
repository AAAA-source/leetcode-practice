想法：用 cursor1 ,cursor2 兩個指針維護兩條 linked list 現在的位置，並用一個carry 代表是否需要進位
那麼現在的節點數值就是 cursor1->val + cursor2->val + carry，大於等於十就記在 carry 上

Time Complexity : O( max(l1.length , l2.length) ) or O(l1.length + l2.length) for traversing two lists
Space Complexity : O(max(l1.length , l2.length) ) for the new list

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* cursor1 = l1 , *cursor2 = l2 ;
        ListNode* head = nullptr , *tail = nullptr ;
        int carry = 0 ;
        while ( cursor1 != nullptr || cursor2 != nullptr || carry != 0 ) {
            int value ;
            if ( cursor1 == nullptr && cursor2 == nullptr ) {
                value = carry ;
            }
            else if ( cursor1 == nullptr ) {
                value = cursor2->val + carry ;
                cursor2 = cursor2->next ;
            }
            else if ( cursor2 == nullptr ) {
                value = cursor1->val + carry ;
                cursor1 = cursor1->next ;
            }
            else {
                value = cursor1->val + cursor2->val + carry ;
                cursor1 = cursor1->next ;
                cursor2 = cursor2->next ;
            }

            if ( value >= 10 ) {
                value -= 10 ;
                carry = 1 ;
            }
            else 
                carry = 0 ;

            if ( head == nullptr ) {
                head = new ListNode(value) ; 
                tail = head ;
            }
            else {
                tail->next = new ListNode(value) ;
                tail = tail->next ;
            }
        }
        return head ;
    }
};
