想法：使用 dp[i] 紀錄 s[0 ... i] 是否能被拆解成字典內的字，那麼 dp[i] = 1 if for some string in dict that string is s[0 ... i] suffix , and dp[i - string.length ] == 1 

Time Complexity : O(mn^2) for every position finding all string in dictionary and take O(n) time to compare
Space Complexity : O(n) for the dp array 

class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        vector<int> dp( s.size() + 1 ) ;
        dp[0] = 1 ;
        for(int i = 1 ; i <= s.size() ; i++) {
            for(auto &str : wordDict) {
                if ( i >= str.length() 
                    && s.substr(i - str.length() , str.length() ) == str 
                    && dp[i - str.length()] == 1) {
                        dp[i] = 1 ;
                        break ;
                }
            }
        } 
        return dp.back() == 1 ;
    }   
};

// 法二：把字典內的字放入 hash set 中，再檢查是否有 dp[j] == 1 和 s[j .. i] 出現在 hash set 內，有的話 dp[i] = 1 

Time Complexity : O(n^2) for every position finding j = 0 .. i and take O(1) time to check if the suffix is in the hash set 

class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        vector<int> dp( s.size() + 1 ) ;
        unordered_set<string> dict( wordDict.begin() , wordDict.end() ) ;
        dp[0] = 1 ;
        for(int i = 1 ; i <= s.size() ; i++) {
            for(int j = 0 ; j < i ; j++) {
                if ( dp[j] == 1 &&  dict.find(s.substr(j , i - j)) != dict.end()) {
                    dp[i] = 1 ;
                    break ;
                }
            }
        } 
        return dp.back() == 1 ;
    }   
};
