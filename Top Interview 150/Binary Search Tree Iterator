想法：用 hash map 紀錄每個 TreeNode 的下一個TreeNode 是什麼
可在一開始DFS一次完成，之後只需更新 iterator 以及查看 hash map 就好

// assume there is n nodes and m operations
Time Complexity : O(n + m) for O(n) time traversal and O(m) operations each takes O(1) time
Space Complexity : O(n) for hash map 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
public:
    unordered_map<TreeNode* , TreeNode*> nextmap ;
    TreeNode* now ;
    void DFS( TreeNode* root ) {
        if ( root == nullptr )
            return ;

        DFS(root->left) ;
        nextmap[now] = root ;
        now = root ;
        DFS(root->right) ;
        return ;
    }

    BSTIterator(TreeNode* root) {
        now = nullptr ;
        DFS(root) ;
        nextmap[now] = nullptr ;
        now = nullptr ;
    }
    
    int next() {
        now = nextmap[now] ;
        return now->val ;
    }
    
    bool hasNext() {
        return nextmap[now] != nullptr ;
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */

// 法二：可以使用 vector 紀錄走過的所有節點，再用 index 紀錄目前位置即可

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
public:
    vector<int> flatten ;
    int index = 0 ;
    void DFS( TreeNode* root ) {
        if ( root == nullptr )
            return ;

        DFS(root->left) ;
        flatten.push_back(root->val) ;
        DFS(root->right) ;
        return ;
    }

    BSTIterator(TreeNode* root) {
        DFS(root) ;
    }
    
    int next() {
        return flatten[index++] ;
    }
    
    bool hasNext() {
        return index < flatten.size() ;
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */

// 法三：使用 stack 紀錄目前整顆樹未被輸出的最左分支；那麼葉節點就會在 stack 最上層，同時葉節點也是目前的 next()
而每次next() 後只需再次維護最左分支即可

Time Complexity : O(n + m) for overall one time DFS and O(m) operations takes O(m) times
Space Complexity : O(h) for the stack 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
public:
    stack<TreeNode*> s ;
    void pushcandidates(TreeNode* root) {
        while (root != nullptr) {
            s.push(root) ;
            root = root->left ;
        }
    }  

    BSTIterator(TreeNode* root) {
        pushcandidates(root) ;
    }
    
    int next() {
        TreeNode* result = s.top() ;
        s.pop() ;
        pushcandidates(result->right) ;
        return result->val ;
    }
    
    bool hasNext() {
        return !s.empty() ;
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */



