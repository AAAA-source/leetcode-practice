想法：將所有字串擷取出來，存在 stack 裡面；接著再從頂部 pop 出並組成新字串即可

Time Complexity : O(n) for traversing string s 
Space Complexity : O(n) for the stack to store all strings (the strings total length <= s.length )

class Solution {
public:
    string reverseWords(string s) {
        stack<string> store ;
        string temp ;
        for(auto &i : s) {
            if ( i == ' ' ) {
                if ( !temp.empty() ) {
                    store.push(temp) ;
                    temp = "";
                }
            }
            else 
                temp += i ;
        }
        if (!temp.empty())
            store.push(temp);

        string ans ;
        while ( !store.empty() ) {
            if ( ans.empty() ) {
                ans += store.top() ;
            }
            else {
                ans += " " + store.top() ;
            }
            store.pop() ;
        }
        return ans ;
    }
};

// 法二：如果不使用額外空間(除了輸出字串)，就要把 stack 的過程直接作用在輸出字串上 
也就是 ans = temp + " " + ans

Time Complexity : O(n^2) for O(n) strings and each one take O(n) time to concate
Space Complexity : O(n) for the answer string


class Solution {
public:
    string reverseWords(string s) {
        string ans ;
        string temp ;
        for(auto &c : s) {
            if ( c == ' ' ) {
                if ( !temp.empty() ) {
                    if ( ans.empty() )
                        ans = temp ;
                    else 
                        ans = temp + " " + ans ;
                    
                    temp = "" ;
                }
            }
            else 
                temp += c ;

        } 
        if ( !temp.empty() ) {
            if ( ans.empty() )
                ans = temp ;
            else 
                ans = temp + " " + ans ;
                    
            temp = "" ;
        }
        return ans ;
    }
};


// 法三：先用 reverse 的技巧，並在 reverse 的過程中挑掉連續的空格，這樣就會得到一個單字內被 reverse，但順序正確的字串
接著再把每個單字 reverse 回來即可

Time Complexity : O(n) for each character at most reverses two times
Space Complexity : O(n) for the output string (沒有使用額外空間)

class Solution {
public:
    string reverseWords(string s) {
        string ans ; 
        int first = 0 ; 
        while ( s[first] == ' ' )
            first++ ;

        for(int i = s.length() - 1 ; i >= first ; i--) {
            if ( s[i] == ' ' && (i == s.length() - 1 || i == 0 || s[i + 1] == ' ') )
                continue ;
            ans += s[i] ;
        }
        
        int start = 0 ;
        for(int i = 0 ; i < ans.length() ; i++) {
            if ( ans[i] == ' ' ) {
                reverse( ans.begin() + start , ans.begin() + i ) ;
                start = i + 1 ;
            }
        }
        reverse( ans.begin() + start , ans.end() ) ;
        
        return ans ;
    }
};
