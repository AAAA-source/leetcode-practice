想法：先紀錄走過的所有數字，在葉節點時算出總和並加總在同一變數上即可

Time Complexity : O(n^2) for O(n / 2) leaves and the path has O(n) numbers
Space Complexity : O(n) for DFS

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int pathtonum(vector<int> &path) {
        int sum = 0 ;
        for(auto &i : path) {
            sum *= 10 ;
            sum += i ;
        }
        return sum ;
    }
    void DFSsum( TreeNode* root , int &ans , vector<int> &path ) {
        path.push_back( root->val ) ;
        if ( !root->left && !root->right) {
            ans += pathtonum(path) ;
        }
        else if ( !root->left ) {
            DFSsum(root->right , ans , path) ;
        }
        else if ( !root->right ) {
            DFSsum( root->left , ans , path ) ;
        }
        else {
            DFSsum(root->left , ans , path) ;
            DFSsum(root->right , ans , path) ;
        }
        path.pop_back() ;
        return ;
    }
    int sumNumbers(TreeNode* root) {
        int ans = 0 ;
        vector<int> path ;
        DFSsum(root , ans , path) ;
        return ans ;
    }
};

// 法二：原本的方法會重複算到多次已經走過的 path 的總和，所以實際上可以只用一個 int 變數紀錄走過的 path 的數字總和就好

Time Complexity : O(n) for DFS 
Space Complexity : O(n) for DFS

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void DFSsum( TreeNode* root , int &ans , int count ) {
        count *= 10 ;
        count += root->val ;
        if ( !root->left && !root->right) {
            ans += count ;
        }
        else if ( !root->left ) {
            DFSsum(root->right , ans , count) ;
        }
        else if ( !root->right ) {
            DFSsum( root->left , ans , count ) ;
        }
        else {
            DFSsum(root->left , ans , count) ;
            DFSsum(root->right , ans , count) ;
        }
        
        return ;
    }
    int sumNumbers(TreeNode* root) {
        int ans = 0 ;
        
        DFSsum(root , ans , 0) ;
        return ans ;
    }
};
