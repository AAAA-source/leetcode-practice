想法：考慮任意兩點組成的直線，並紀錄所有在該直線的點有幾個，同時維護最大值即可

Time Complexity : O(n^3) for O(n^2) pair and each pair needs O(n) time to check
Space Complexity ; O(1) for variables 

class Solution {
public:
    bool sameline( vector<vector<int>>& points , int i , int j , int k ) {
        return 
        ( points[i][0] == points[j][0] && points[i][0] == points[k][0] ) || 
        (points[i][1] == points[j][1] && points[i][1] == points[k][1]) || 
        ((double)points[i][0] - points[j][0]) / ((double)points[i][0] - points[k][0]) 
        == ((double)points[i][1] - points[j][1]) / ((double)points[i][1] - points[k][1]) ;
    }
    int maxPoints(vector<vector<int>>& points) {
        int n = points.size() ;
        if (n <= 2)
            return n ;
        int maxvalue = 0 ;
        for(int i = 0 ; i < n ; i++) {
            for(int j = i + 1 ; j < n ; j++) {
                // the line go through points[i] , points[j] 
                int value = 2 ;
                for(int k = 0 ; k < n ; k++) {
                    if ( k == i || k == j )
                        continue ;
                    if (  sameline(points , i , j , k) ) {
                        value++ ;
                    }
                }
                maxvalue = max(maxvalue , value) ;
            }
        }
        return maxvalue ;
    }
};

// 法二：對於每一點，都紀錄所有其他點到該點之間的直線斜率，並用 hash set 紀錄相同斜率的點有幾個
因為只要擁有相同斜率且都經過該點，那麼這些點都共線

注意：斜率相除時分母為零的特殊情況，需要回傳 INT_MAX (代表是水平線/垂直線)

Time Complexity : O(n^2) for n points and each one needs O(n) time to record
Space Complexity : O(n^2) for n size O(n) hash sets

class Solution {
public:
    double slope( vector<vector<int>>& points , int i , int j ) {
        int x1 = points[i][0] , y1 = points[i][1] ;
        int x2 = points[j][0] , y2 = points[j][1] ;
        
        if (y1 == y2)
            return INT_MAX ;
        else 
            return (double)((double)x2 - x1) / ((double)y2 - y1) ;

    }
    int maxPoints(vector<vector<int>>& points) {
        int n = points.size() ;
        if (n <= 2)
            return n ;

        int maxvalue = 0 ;
        for(int i = 0 ; i < n ; i++) {
            unordered_map<double , int> sameline ;
            for(int j = i + 1 ; j < n ; j++) {
                if (i == j)
                    continue ;
                sameline[ slope( points , i , j ) ]++ ;
                maxvalue = max(maxvalue , 1 + sameline[ slope( points , i , j )]) ;
            }
        }
        return maxvalue ;
    }
};


