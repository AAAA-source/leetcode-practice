想法：使用 Recursive Backtracking 直接嘗試所有可能即可

Time Complexity : O( (9!)^9 ) for every row have 9! possible solution and there are 9 rows
Space Complexity : O(1) for the  81 grids array (board)


class Solution {
public:
    bool valid( int index , vector<vector<char>>& board , char num ) {
        int row = index / 9 , column = index % 9 ;

        // check row , column
        for(int i = 0 ; i < 9 ; i++) {
            if ( board[row][i] == num )
                return false ;
            if ( board[i][column] == num )
                return false ;
        }

        // check grid 
        int gridrow = row / 3 , gridcolumn = column / 3 ;
        for(int i = 0 ; i < 3 ; i++) {
            for(int j = 0 ; j < 3 ; j++) {
                if ( board[gridrow * 3 + i][gridcolumn * 3 + j] == num )
                    return false ;
            }
        }
        return true ;
    }
    bool findsolution( int index , vector<vector<char>>& board ) {
        if ( index == 81 )
            return true ;

        int row = index / 9 , column = index % 9 ;
        if ( board[row][column] != '.' )
            return findsolution(index + 1 , board) ;
        for(char number = '1' ; number <= '9' ; number++) {
            if ( valid(index , board , number) ) {
                board[row][column] = number ;
                if ( findsolution(index + 1 , board) )
                    return true ;
            }
            
        }
        board[row][column] = '.' ;
        return false ;
    }

    void solveSudoku(vector<vector<char>>& board) {
        findsolution(0 , board) ;
        return ;
    }   
};
